package main

import "fmt"

func main() {
	var x, y int
	z := 1
	xs := []int{}
	limit := 4000000
	for z < limit {
		x = y + z
		y = z + x
		z = y + x
		if x > limit {
		} else if y > limit {
			xs = append(xs, x)
		} else if z > limit {
			xs = append(xs, x, y)
		} else if z < limit {
			xs = append(xs, x, y, z)
		}
	}
	fmt.Println(xs)
	fmt.Println(addeven(xs))
}

func addeven(x []int) int {
	var total int
	for _, counter := range x {
		if counter%2 == 0 {
			total += counter
		}
	}
	return total
}

// Solved by: Erwin Salubre
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
